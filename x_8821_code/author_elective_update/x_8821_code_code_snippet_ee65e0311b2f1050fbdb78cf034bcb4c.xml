<?xml version="1.0" encoding="UTF-8"?><record_update table="x_8821_code_code_snippet">
    <x_8821_code_code_snippet action="DELETE">
        <applicable_in_application_files/>
        <applicable_in_context>server</applicable_in_context>
        <client_script><![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return <result>;
// }]]></client_script>
        <css/>
        <description>A useful class many people don't know is available to be used is "GlideScopedEvaluator" in the Glide library (similar to an "eval()" encapsulation statement ran inside a Widget Server Script).  This useful function can be run against a GlideElement that contains at least one field of type "Script".  Despite it's misleading name, it is able to be run inside of the Global application as well as Scoped applications.&#13;
&#13;
You can add a "Script" field type on any table.  (It is advised to call the database field name "run_this_script", in accordance with other ServiceNow tables.)  In this field you can contain code unique to the record, and you can make this code do anything to the ServiceNow database that any other server-side code snippet can do.  The true advantage here is that scripts are able to be run at the record level,  not the table level as typical with other configurations.&#13;
</description>
        <jelly_script/>
        <link/>
        <name>[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts</name>
        <option_schema/>
        <sample_input>{&#13;
"arg1":  "val1",&#13;
"arg2":  "val2",&#13;
"arg3":  "val3"&#13;
// Add additional arguments as needed.&#13;
// Please delete these comments before executing.&#13;
}</sample_input>
        <sample_output_client/>
        <sample_output_server/>
        <server_script><![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return <result>;
// }

function retrieveVariableValues(questionSysID, question) {  
  
    // Iterate through matching variables in HTML body  
    var variables = question.match(/{.*?}/gi);  
    for (var v in variables) {  
          
        // Lookup question's association to question variable  
        var questionVariableQuestionsGR = new GlideRecord("x_icir_ipo_m2m_question_var_questions");  
        questionVariableQuestionsGR.addQuery("question", questionSysID);  
        questionVariableQuestionsGR.addQuery("question_variable.name", variables[v].replace("{", "").replace("}", ""));  
        questionVariableQuestionsGR.query();  
        if (questionVariableQuestionsGR.next()) {  
  
            // Evaluate question variable and replace braced text with value from script field (will be evaluated)  
            var questionVariableGR = new GlideRecord("x_icir_ipo_question_variable");  
            questionVariableGR.addQuery("sys_id", questionVariableQuestionsGR.question_variable);  
            questionVariableGR.query();  
            if (questionVariableGR.next()) {  
  
                var evaluator = new GlideScopedEvaluator();  
                evaluator.putVariable('object', {  
                    'patientSysID': data.patientSysID  
                });  
  
                var value = evaluator.evaluateScript(questionVariableGR, 'return_value_script', {x: {}});  
  
                question = question.replace(variables[v], value);  
            }  
        }  
    }  
  
    return question;  
} 
]]></server_script>
        <sys_class_name>x_8821_code_code_snippet</sys_class_name>
        <sys_created_by>alex.chansuthus@infocenter.io</sys_created_by>
        <sys_created_on>2020-09-29 20:03:25</sys_created_on>
        <sys_id>ee65e0311b2f1050fbdb78cf034bcb4c</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_update_name>x_8821_code_code_snippet_ee65e0311b2f1050fbdb78cf034bcb4c</sys_update_name>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-23 03:09:56</sys_updated_on>
        <template/>
    </x_8821_code_code_snippet>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</application>
        <file_path/>
        <instance_id>bfd5826bdb455f400e785d00cf961982</instance_id>
        <instance_name>infocenter</instance_name>
        <name>x_8821_code_code_snippet_ee65e0311b2f1050fbdb78cf034bcb4c</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_8821_code_code_snippet"&gt;&lt;x_8821_code_code_snippet action="INSERT_OR_UPDATE"&gt;&lt;applicable_in_application_files/&gt;&lt;applicable_in_context&gt;server&lt;/applicable_in_context&gt;&lt;client_script&gt;&lt;![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return &lt;result&gt;;
// }]]&gt;&lt;/client_script&gt;&lt;css/&gt;&lt;description&gt;A useful class many people don't know is available to be used is "GlideScopedEvaluator" in the Glide library (similar to an "eval()" encapsulation statement ran inside a Widget Server Script).  This useful function can be run against a GlideElement that contains at least one field of type "Script".  Despite it's misleading name, it is able to be run inside of the Global application as well as Scoped applications.&amp;#13;
&amp;#13;
You can add a "Script" field type on any table.  (It is advised to call the database field name "run_this_script", in accordance with other ServiceNow tables.)  In this field you can contain code unique to the record, and you can make this code do anything to the ServiceNow database that any other server-side code snippet can do.  The true advantage here is that scripts are able to be run at the record level,  not the table level as typical with other configurations.&amp;#13;
&lt;/description&gt;&lt;jelly_script/&gt;&lt;link/&gt;&lt;name&gt;[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts&lt;/name&gt;&lt;option_schema/&gt;&lt;sample_input&gt;{&amp;#13;
"arg1":  "val1",&amp;#13;
"arg2":  "val2",&amp;#13;
"arg3":  "val3"&amp;#13;
// Add additional arguments as needed.&amp;#13;
// Please delete these comments before executing.&amp;#13;
}&lt;/sample_input&gt;&lt;sample_output_client/&gt;&lt;sample_output_server/&gt;&lt;server_script&gt;&lt;![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return &lt;result&gt;;
// }

function retrieveVariableValues(questionSysID, question) {  
  
    // Iterate through matching variables in HTML body  
    var variables = question.match(/{.*?}/gi);  
    for (var v in variables) {  
          
        // Lookup question's association to question variable  
        var questionVariableQuestionsGR = new GlideRecord("x_icir_ipo_m2m_question_var_questions");  
        questionVariableQuestionsGR.addQuery("question", questionSysID);  
        questionVariableQuestionsGR.addQuery("question_variable.name", variables[v].replace("{", "").replace("}", ""));  
        questionVariableQuestionsGR.query();  
        if (questionVariableQuestionsGR.next()) {  
  
            // Evaluate question variable and replace braced text with value from script field (will be evaluated)  
            var questionVariableGR = new GlideRecord("x_icir_ipo_question_variable");  
            questionVariableGR.addQuery("sys_id", questionVariableQuestionsGR.question_variable);  
            questionVariableGR.query();  
            if (questionVariableGR.next()) {  
  
                var evaluator = new GlideScopedEvaluator();  
                evaluator.putVariable('object', {  
                    'patientSysID': data.patientSysID  
                });  
  
                var value = evaluator.evaluateScript(questionVariableGR, 'return_value_script', {x: {}});  
  
                question = question.replace(variables[v], value);  
            }  
        }  
    }  
  
    return question;  
} 
]]&gt;&lt;/server_script&gt;&lt;sys_class_name&gt;x_8821_code_code_snippet&lt;/sys_class_name&gt;&lt;sys_created_by&gt;alex.chansuthus@infocenter.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-29 20:03:25&lt;/sys_created_on&gt;&lt;sys_id&gt;ee65e0311b2f1050fbdb78cf034bcb4c&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts&lt;/sys_name&gt;&lt;sys_package display_value="Code Search and Snip" source="x_8821_code"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Code Search and Snip"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_scope&gt;&lt;sys_update_name&gt;x_8821_code_code_snippet_ee65e0311b2f1050fbdb78cf034bcb4c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;mike.cornell@infocenter.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-10-23 03:09:56&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;/x_8821_code_code_snippet&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-64537658</payload_hash>
        <record_name>[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts</record_name>
        <reverted_from/>
        <source>35f59cef1b40e810476d85507e4bcb43</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 01:56:00</sys_created_on>
        <sys_id>ed16d8231b80e810476d85507e4bcb28</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1757737ffdc0000001</sys_recorded_at>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 01:56:00</sys_updated_on>
        <type>Code Snippet</type>
        <update_guid>5439381910c06450ffb56243ed1aff5c</update_guid>
        <update_guid_history>5439381910c06450ffb56243ed1aff5c:-64537658</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Record deleted 10-29-2020 22:23:00">c94c9c2b1b80e810476d85507e4bcb6b</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 02:23:00</sys_created_on>
        <sys_db_object display_value="" name="x_8821_code_code_snippet">x_8821_code_code_snippet</sys_db_object>
        <sys_id>0c95671479414b4c8da933e7cb0a78a4</sys_id>
        <sys_metadata>ee65e0311b2f1050fbdb78cf034bcb4c</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>[Revisit] How to Use GlideScopedEvaluator to Execute Conditional Scripts</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_scope_delete display_value="">2f952166b84d4492b77d2b80ba54eeb1</sys_scope_delete>
        <sys_update_name>x_8821_code_code_snippet_ee65e0311b2f1050fbdb78cf034bcb4c</sys_update_name>
        <sys_update_version display_value="x_8821_code_code_snippet_ee65e0311b2f1050fbdb78cf034bcb4c">ed16d8231b80e810476d85507e4bcb28</sys_update_version>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 02:23:00</sys_updated_on>
    </sys_metadata_delete>
</record_update>
