<?xml version="1.0" encoding="UTF-8"?><record_update table="x_8821_code_code_snippet">
    <x_8821_code_code_snippet action="DELETE">
        <applicable_in_application_files/>
        <applicable_in_context>server</applicable_in_context>
        <client_script><![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return <result>;
// }]]></client_script>
        <css/>
        <description>Multiple arrays of the same length (but potentially different variable type values in each) can be sorted together ascending or descending by using one of the arrays as a sort leader.  This works for string, date and integer sorting alike.&#13;
This function is particularly handy when representing a sequence of related values that were not able to be collected through one simple GlideRecord query and sorted with a simple orderBy or orderByDesc clause.&#13;
The example below shows schedule records retrieved from the Schedule Entries (cmn_schedule_span) table.  By using a custom sort algorithm, the code then sorts all compiled arrays by the ascending order of the "entryStartDates" array.&#13;
</description>
        <jelly_script/>
        <link/>
        <name>[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader</name>
        <option_schema/>
        <sample_input>{&#13;
"arg1":  "val1",&#13;
"arg2":  "val2",&#13;
"arg3":  "val3"&#13;
// Add additional arguments as needed.&#13;
// Please delete these comments before executing.&#13;
}</sample_input>
        <sample_output_client/>
        <sample_output_server/>
        <server_script><![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return <result>;
// }


// Iterate through schedules  
var entryStartDates = [],  
entryEndDates = [],  
entryCIs = [],  
entryTZs = [];  
  
for (var i = 0; i < schedules.length; i++) {  
  
    // Add first scheduled entry  
    var glideSchedule = new GlideSchedule(schedules[i]);  
    var ms = glideSchedule.whenNext(new GlideDateTime());  
  
    // Setup future date offsets for start and end  
    // Push to arrays  
    var gDate = new GlideDateTime();  
    gDate.add(parseInt(ms));  
    entryStartDates.push(gDate.toString());  
  
    var gDate2 = new GlideDateTime();  
    gDate2.add(parseInt(ms));  
    gDate2.addSeconds(parseInt(scheduleDurations[i]));  
    entryEndDates.push(gDate2.toString());  
  
    entryCIs.push(scheduleCIs[i]);  
    entryTZs.push(scheduleTZs[i]);  
}  

// Sort all arrays by the Ascending Order of entryStartDates (a Custom Sort Algorithm)
var idx2, idx1, temp1, temp2, temp3, temp4;  
for (idx1 = 0; idx1 < entryStartDates.length; idx1++) {  
    for (idx2 = idx1 + 1; idx2 < entryStartDates.length; idx2++) {  
        if (entryStartDates[idx1] > entryStartDates[idx2]) {  
            temp1 = entryStartDates[idx2];  
            temp2 = entryEndDates[idx2];  
            temp3 = entryCIs[idx2];  
            temp4 = entryTZs[idx2];  
  
            entryStartDates[idx2] = entryStartDates[idx1];  
            entryStartDates[idx1] = temp1;  
  
            entryEndDates[idx2] = entryEndDates[idx1];  
            entryEndDates[idx1] = temp2;  
  
            entryCIs[idx2] = entryCIs[idx1];  
            entryCIs[idx1] = temp3;  
  
            entryTZs[idx2] = entryTZs[idx1];  
            entryTZs[idx1] = temp4;  
        }  
    }  
}  

gs.addInfoMessage(entryStartDates.toString());]]></server_script>
        <sys_class_name>x_8821_code_code_snippet</sys_class_name>
        <sys_created_by>alex.chansuthus@infocenter.io</sys_created_by>
        <sys_created_on>2020-09-29 19:59:27</sys_created_on>
        <sys_id>3cc3a0fd1beb1050fbdb78cf034bcb31</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_update_name>x_8821_code_code_snippet_3cc3a0fd1beb1050fbdb78cf034bcb31</sys_update_name>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-23 03:09:47</sys_updated_on>
        <template/>
    </x_8821_code_code_snippet>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</application>
        <file_path/>
        <instance_id>bfd5826bdb455f400e785d00cf961982</instance_id>
        <instance_name>infocenter</instance_name>
        <name>x_8821_code_code_snippet_3cc3a0fd1beb1050fbdb78cf034bcb31</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_8821_code_code_snippet"&gt;&lt;x_8821_code_code_snippet action="INSERT_OR_UPDATE"&gt;&lt;applicable_in_application_files/&gt;&lt;applicable_in_context&gt;server&lt;/applicable_in_context&gt;&lt;client_script&gt;&lt;![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return &lt;result&gt;;
// }]]&gt;&lt;/client_script&gt;&lt;css/&gt;&lt;description&gt;Multiple arrays of the same length (but potentially different variable type values in each) can be sorted together ascending or descending by using one of the arrays as a sort leader.  This works for string, date and integer sorting alike.&amp;#13;
This function is particularly handy when representing a sequence of related values that were not able to be collected through one simple GlideRecord query and sorted with a simple orderBy or orderByDesc clause.&amp;#13;
The example below shows schedule records retrieved from the Schedule Entries (cmn_schedule_span) table.  By using a custom sort algorithm, the code then sorts all compiled arrays by the ascending order of the "entryStartDates" array.&amp;#13;
&lt;/description&gt;&lt;jelly_script/&gt;&lt;link/&gt;&lt;name&gt;[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader&lt;/name&gt;&lt;option_schema/&gt;&lt;sample_input&gt;{&amp;#13;
"arg1":  "val1",&amp;#13;
"arg2":  "val2",&amp;#13;
"arg3":  "val3"&amp;#13;
// Add additional arguments as needed.&amp;#13;
// Please delete these comments before executing.&amp;#13;
}&lt;/sample_input&gt;&lt;sample_output_client/&gt;&lt;sample_output_server/&gt;&lt;server_script&gt;&lt;![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return &lt;result&gt;;
// }


// Iterate through schedules  
var entryStartDates = [],  
entryEndDates = [],  
entryCIs = [],  
entryTZs = [];  
  
for (var i = 0; i &lt; schedules.length; i++) {  
  
    // Add first scheduled entry  
    var glideSchedule = new GlideSchedule(schedules[i]);  
    var ms = glideSchedule.whenNext(new GlideDateTime());  
  
    // Setup future date offsets for start and end  
    // Push to arrays  
    var gDate = new GlideDateTime();  
    gDate.add(parseInt(ms));  
    entryStartDates.push(gDate.toString());  
  
    var gDate2 = new GlideDateTime();  
    gDate2.add(parseInt(ms));  
    gDate2.addSeconds(parseInt(scheduleDurations[i]));  
    entryEndDates.push(gDate2.toString());  
  
    entryCIs.push(scheduleCIs[i]);  
    entryTZs.push(scheduleTZs[i]);  
}  

// Sort all arrays by the Ascending Order of entryStartDates (a Custom Sort Algorithm)
var idx2, idx1, temp1, temp2, temp3, temp4;  
for (idx1 = 0; idx1 &lt; entryStartDates.length; idx1++) {  
    for (idx2 = idx1 + 1; idx2 &lt; entryStartDates.length; idx2++) {  
        if (entryStartDates[idx1] &gt; entryStartDates[idx2]) {  
            temp1 = entryStartDates[idx2];  
            temp2 = entryEndDates[idx2];  
            temp3 = entryCIs[idx2];  
            temp4 = entryTZs[idx2];  
  
            entryStartDates[idx2] = entryStartDates[idx1];  
            entryStartDates[idx1] = temp1;  
  
            entryEndDates[idx2] = entryEndDates[idx1];  
            entryEndDates[idx1] = temp2;  
  
            entryCIs[idx2] = entryCIs[idx1];  
            entryCIs[idx1] = temp3;  
  
            entryTZs[idx2] = entryTZs[idx1];  
            entryTZs[idx1] = temp4;  
        }  
    }  
}  

gs.addInfoMessage(entryStartDates.toString());]]&gt;&lt;/server_script&gt;&lt;sys_class_name&gt;x_8821_code_code_snippet&lt;/sys_class_name&gt;&lt;sys_created_by&gt;alex.chansuthus@infocenter.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-29 19:59:27&lt;/sys_created_on&gt;&lt;sys_id&gt;3cc3a0fd1beb1050fbdb78cf034bcb31&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader&lt;/sys_name&gt;&lt;sys_package display_value="Code Search and Snip" source="x_8821_code"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Code Search and Snip"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_scope&gt;&lt;sys_update_name&gt;x_8821_code_code_snippet_3cc3a0fd1beb1050fbdb78cf034bcb31&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;mike.cornell@infocenter.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-10-23 03:09:47&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;/x_8821_code_code_snippet&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1733345922</payload_hash>
        <record_name>[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader</record_name>
        <reverted_from/>
        <source>35f59cef1b40e810476d85507e4bcb43</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 01:55:59</sys_created_on>
        <sys_id>2916d8231b80e810476d85507e4bcb10</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1757737ff430000001</sys_recorded_at>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 01:55:59</sys_updated_on>
        <type>Code Snippet</type>
        <update_guid>1c39381930c06450070b4de71ad42e4f</update_guid>
        <update_guid_history>1c39381930c06450070b4de71ad42e4f:-1733345922</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Record deleted 10-29-2020 22:22:59">894c9c2b1b80e810476d85507e4bcb51</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 02:22:59</sys_created_on>
        <sys_db_object display_value="" name="x_8821_code_code_snippet">x_8821_code_code_snippet</sys_db_object>
        <sys_id>a77bb3b53f604222abbe7030bbff8589</sys_id>
        <sys_metadata>3cc3a0fd1beb1050fbdb78cf034bcb31</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>[Revisit] How to Sort Multiple Arrays with an Array Acting as the Sort Leader</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_scope_delete display_value="">2f952166b84d4492b77d2b80ba54eeb1</sys_scope_delete>
        <sys_update_name>x_8821_code_code_snippet_3cc3a0fd1beb1050fbdb78cf034bcb31</sys_update_name>
        <sys_update_version display_value="x_8821_code_code_snippet_3cc3a0fd1beb1050fbdb78cf034bcb31">2916d8231b80e810476d85507e4bcb10</sys_update_version>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 02:22:59</sys_updated_on>
    </sys_metadata_delete>
</record_update>
