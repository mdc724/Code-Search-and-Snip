<?xml version="1.0" encoding="UTF-8"?><record_update table="x_8821_code_code_snippet">
    <x_8821_code_code_snippet action="DELETE">
        <applicable_in_application_files>c03acfd11b6fdc10fbdb78cf034bcb80</applicable_in_application_files>
        <applicable_in_context>server</applicable_in_context>
        <client_script><![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return <result>;
// }]]></client_script>
        <css/>
        <description>Sometimes when error logs are captured, the system shows unnamed sys_ids without any extra context. These sys_ids often are configurations that are failing in the tool, but the system doesn't make it easy to identify what name or type of script they are.&#13;
&#13;
1.	Define the searchSysId of the script below with the sys_id you are trying to identify from the log.&#13;
2.	Run this code as a Background Script.&#13;
3.	The Background Script should return the sys_id, name, and table where the configuration resides.  Note this code will NOT work for just any sys_id.  It does not work for searching Task or Task-extended records, for example.  It only works for identifying failed configuration artifacts.&#13;
</description>
        <jelly_script/>
        <link/>
        <name>How to Search for a Configuration Artifact by Sys_ID</name>
        <option_schema/>
        <sample_input>{&#13;
"searchSysId":  "87d3b08093010200ea933007f67ffb8g"&#13;
}</sample_input>
        <sample_output_client/>
        <sample_output_server/>
        <server_script><![CDATA[getConfigID(searchSysId);

function getConfigID(searchSysId){
	var found = false;  //Found is false until a record is located

	//Searches the metadata table for the sys_id, returns table information if matched 
	var metadataGR = new GlideRecord('sys_metadata');  
	metadataGR.addQuery('sys_id', searchSysId);  
	metadataGR.query();  
	if (metadataGR.next()) {  
		var className = metadataGR.getValue("sys_class_name");  

		//If there is a metadata record, query the source table for the record
		var grTarget = new GlideRecord(metadataGR.getValue("sys_class_name")); 
		grTarget.addQuery('sys_id',searchSysId);
		grTarget.query();  
		//If there is a match record on the source table, add message for sys_id, name, and table
		if (grTarget.next()) {  
			gs.addInfoMessage("******* Information Found *******\n"+"Sys ID:\t" + grTarget.sys_id+"\nName:\t" + grTarget.name + "\nTable:\t" + className);  
			found = true;   
		}
	}  
	if (found == false) {  
		gs.addInfoMessage("No records found with this sys_id");  
	} 
}]]></server_script>
        <sys_class_name>x_8821_code_code_snippet</sys_class_name>
        <sys_created_by>alex.chansuthus@infocenter.io</sys_created_by>
        <sys_created_on>2020-09-28 18:11:41</sys_created_on>
        <sys_id>57de36d91b2fdc10fbdb78cf034bcbf3</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>How to Search for a Configuration Artifact by Sys_ID</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_update_name>x_8821_code_code_snippet_57de36d91b2fdc10fbdb78cf034bcbf3</sys_update_name>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-23 03:09:33</sys_updated_on>
        <template/>
    </x_8821_code_code_snippet>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</application>
        <file_path/>
        <instance_id>bfd5826bdb455f400e785d00cf961982</instance_id>
        <instance_name>infocenter</instance_name>
        <name>x_8821_code_code_snippet_57de36d91b2fdc10fbdb78cf034bcbf3</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_8821_code_code_snippet"&gt;&lt;x_8821_code_code_snippet action="INSERT_OR_UPDATE"&gt;&lt;applicable_in_application_files&gt;c03acfd11b6fdc10fbdb78cf034bcb80&lt;/applicable_in_application_files&gt;&lt;applicable_in_context&gt;server&lt;/applicable_in_context&gt;&lt;client_script&gt;&lt;![CDATA[// To make code snippet able to test "Sample Input":

// fnName(arg1, arg2, arg3);
// function fnName(arg1, arg2, arg3) {
    // Code to execute
    // return &lt;result&gt;;
// }]]&gt;&lt;/client_script&gt;&lt;css/&gt;&lt;description&gt;Sometimes when error logs are captured, the system shows unnamed sys_ids without any extra context. These sys_ids often are configurations that are failing in the tool, but the system doesn't make it easy to identify what name or type of script they are.&amp;#13;
&amp;#13;
1.	Define the searchSysId of the script below with the sys_id you are trying to identify from the log.&amp;#13;
2.	Run this code as a Background Script.&amp;#13;
3.	The Background Script should return the sys_id, name, and table where the configuration resides.  Note this code will NOT work for just any sys_id.  It does not work for searching Task or Task-extended records, for example.  It only works for identifying failed configuration artifacts.&amp;#13;
&lt;/description&gt;&lt;jelly_script/&gt;&lt;link/&gt;&lt;name&gt;How to Search for a Configuration Artifact by Sys_ID&lt;/name&gt;&lt;option_schema/&gt;&lt;sample_input&gt;{&amp;#13;
"searchSysId":  "87d3b08093010200ea933007f67ffb8g"&amp;#13;
}&lt;/sample_input&gt;&lt;sample_output_client/&gt;&lt;sample_output_server/&gt;&lt;server_script&gt;&lt;![CDATA[getConfigID(searchSysId);

function getConfigID(searchSysId){
	var found = false;  //Found is false until a record is located

	//Searches the metadata table for the sys_id, returns table information if matched 
	var metadataGR = new GlideRecord('sys_metadata');  
	metadataGR.addQuery('sys_id', searchSysId);  
	metadataGR.query();  
	if (metadataGR.next()) {  
		var className = metadataGR.getValue("sys_class_name");  

		//If there is a metadata record, query the source table for the record
		var grTarget = new GlideRecord(metadataGR.getValue("sys_class_name")); 
		grTarget.addQuery('sys_id',searchSysId);
		grTarget.query();  
		//If there is a match record on the source table, add message for sys_id, name, and table
		if (grTarget.next()) {  
			gs.addInfoMessage("******* Information Found *******\n"+"Sys ID:\t" + grTarget.sys_id+"\nName:\t" + grTarget.name + "\nTable:\t" + className);  
			found = true;   
		}
	}  
	if (found == false) {  
		gs.addInfoMessage("No records found with this sys_id");  
	} 
}]]&gt;&lt;/server_script&gt;&lt;sys_class_name&gt;x_8821_code_code_snippet&lt;/sys_class_name&gt;&lt;sys_created_by&gt;alex.chansuthus@infocenter.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-09-28 18:11:41&lt;/sys_created_on&gt;&lt;sys_id&gt;57de36d91b2fdc10fbdb78cf034bcbf3&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;How to Search for a Configuration Artifact by Sys_ID&lt;/sys_name&gt;&lt;sys_package display_value="Code Search and Snip" source="x_8821_code"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Code Search and Snip"&gt;0f7b73c4dba433007d159235ca96197c&lt;/sys_scope&gt;&lt;sys_update_name&gt;x_8821_code_code_snippet_57de36d91b2fdc10fbdb78cf034bcbf3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;mike.cornell@infocenter.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-10-23 03:09:33&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;/x_8821_code_code_snippet&gt;&lt;/record_update&gt;</payload>
        <payload_hash>593868042</payload_hash>
        <record_name>How to Search for a Configuration Artifact by Sys_ID</record_name>
        <reverted_from/>
        <source>35f59cef1b40e810476d85507e4bcb43</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 01:55:59</sys_created_on>
        <sys_id>6516d8231b80e810476d85507e4bcb1e</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>1757737ff550000001</sys_recorded_at>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 01:55:59</sys_updated_on>
        <type>Code Snippet</type>
        <update_guid>d039381914c06450c202589b15688151</update_guid>
        <update_guid_history>d039381914c06450c202589b15688151:593868042</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Record deleted 10-29-2020 22:22:59">094c9c2b1b80e810476d85507e4bcb54</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-10-30 02:22:59</sys_created_on>
        <sys_db_object display_value="" name="x_8821_code_code_snippet">x_8821_code_code_snippet</sys_db_object>
        <sys_id>e690cd62a3504eb6862127200e691471</sys_id>
        <sys_metadata>57de36d91b2fdc10fbdb78cf034bcbf3</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>How to Search for a Configuration Artifact by Sys_ID</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_scope_delete display_value="">2f952166b84d4492b77d2b80ba54eeb1</sys_scope_delete>
        <sys_update_name>x_8821_code_code_snippet_57de36d91b2fdc10fbdb78cf034bcbf3</sys_update_name>
        <sys_update_version display_value="x_8821_code_code_snippet_57de36d91b2fdc10fbdb78cf034bcbf3">6516d8231b80e810476d85507e4bcb1e</sys_update_version>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-30 02:22:59</sys_updated_on>
    </sys_metadata_delete>
</record_update>
