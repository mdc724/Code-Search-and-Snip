<?xml version="1.0" encoding="UTF-8"?><record_update table="x_8821_code_code_snippet">
    <x_8821_code_code_snippet action="INSERT_OR_UPDATE">
        <applicable_in_application_files/>
        <applicable_in_context>client_server</applicable_in_context>
        <client_script><![CDATA[formatPhoneNumber(phoneNumber);

function formatPhoneNumber(phoneNumber) {

	// Return if phone number empty  
	if (phoneNumber == "" || phoneNumber == null || phoneNumber == undefined)  
		return null;  


	// Format Phone Number  
	phoneNumber = String(phoneNumber).replace(/[^0-9]/g, '');  

	if (phoneNumber.toString().length == 10) {  
		phoneNumber = '(' + phoneNumber.toString().substr(0,3) + ') ' +   
			phoneNumber.toString().substr(3,3) + '-' +   
			phoneNumber.toString().substr(6,4);  
	}  
	if (phoneNumber.toString().length == 11) {  
		phoneNumber = phoneNumber.toString().slice(1);  
		phoneNumber = '(' + phoneNumber.toString().substr(0,3) + ') ' +   
			phoneNumber.toString().substr(3,3) + '-' +   
			phoneNumber.toString().substr(6,4);  
	}

	return phoneNumber; // Sample Return Value:  (111) 222-3333  
}

]]></client_script>
        <css/>
        <description>Phone numbers that are placed on User, Contact and Consumer records by external systems often come in a variety of non-consistent phone formats, like E164.  Even call systems sometimes pass phone arguments (via URL) that are not consistent with itself or with ServiceNow.&#13;
&#13;
The code snippet below is a quick remedy to this inconsistency.  Please use the function below in order to output a consistent phone number format â€“ just make sure this is applied to all needed contexts:  transform field scripts, business rules, and even client scripts where applicable.&#13;
</description>
        <jelly_script/>
        <link/>
        <name>Format Phone Number</name>
        <option_schema/>
        <sample_input>{
	"phoneNumber": 1111115223
}</sample_input>
        <sample_output_client>(111) 111-5223</sample_output_client>
        <sample_output_server>(111) 111-5223</sample_output_server>
        <server_script><![CDATA[formatPhoneNumber(phoneNumber);

function formatPhoneNumber(phoneNumber) {

	// Return if phone number empty  
	if (phoneNumber == "" || phoneNumber == null || phoneNumber == undefined)  
		return null;  


	// Format Phone Number  
	phoneNumber = String(phoneNumber).replace(/[^0-9]/g, '');  

	if (phoneNumber.toString().length == 10) {  
		phoneNumber = '(' + phoneNumber.toString().substr(0,3) + ') ' +   
			phoneNumber.toString().substr(3,3) + '-' +   
			phoneNumber.toString().substr(6,4);  
	}  
	if (phoneNumber.toString().length == 11) {  
		phoneNumber = phoneNumber.toString().slice(1);  
		phoneNumber = '(' + phoneNumber.toString().substr(0,3) + ') ' +   
			phoneNumber.toString().substr(3,3) + '-' +   
			phoneNumber.toString().substr(6,4);  
	}

	return phoneNumber; // Sample Return Value:  (111) 222-3333  
}

]]></server_script>
        <sys_class_name>x_8821_code_code_snippet</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-09-24 21:45:40</sys_created_on>
        <sys_id>a12d07cc2fab50507e72821df699b688</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>Format Phone Number</sys_name>
        <sys_package display_value="Code Search and Snip" source="x_8821_code">0f7b73c4dba433007d159235ca96197c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Code Search and Snip">0f7b73c4dba433007d159235ca96197c</sys_scope>
        <sys_update_name>x_8821_code_code_snippet_a12d07cc2fab50507e72821df699b688</sys_update_name>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-10-23 04:12:30</sys_updated_on>
        <template/>
    </x_8821_code_code_snippet>
</record_update>
